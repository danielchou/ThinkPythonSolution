#!/usr/bin/env python
# coding: utf-8

# 您可以從以下網站訂購《Think Python 3e》的印刷版和電子書版本：
# [Bookshop.org](https://bookshop.org/a/98697/9781098155438) 和
# [Amazon](https://www.amazon.com/_/dp/1098155432?smid=ATVPDKIKX0DER&_encoding=UTF8&tag=oreilly20-20&_encoding=UTF8&tag=greenteapre01-20&linkCode=ur2&linkId=e2a529f94920295d27ec8a06e757dc7c&camp=1789&creative=9325)。

# # 歡迎
# 
# 這是《Think Python》第3版第1章的Jupyter筆記本，作者Allen B. Downey。
# 
# 如果您不熟悉Jupyter筆記本，
# [請點擊這裡查看簡短介紹](https://colab.research.google.com/github/AllenDowney/ThinkPython/blob/v3/chapters/jupyter_intro.ipynb)。
# 
# 然後，如果您還沒有在Colab上執行此筆記本，[請點擊這裡在Colab上執行此筆記本](https://colab.research.google.com/github/AllenDowney/ThinkPython/blob/v3/chapters/chap01.ipynb)。

# 以下程式碼會下載一個檔案並執行專門為本書設計的程式碼。
# 您現在還不需要理解這個程式碼，但在執行筆記本中的其他內容之前，您應該先執行它。
# 請記住，您可以透過選取儲存格並按下播放按鈕（圓圈中的三角形）或按住`Shift`並按`Enter`來執行程式碼。

# In[1]:


from os.path import basename, exists

def download(url):
    filename = basename(url)
    if not exists(filename):
        from urllib.request import urlretrieve

        local, _ = urlretrieve(url, filename)
        print("Downloaded " + str(local))
    return filename

download('https://github.com/AllenDowney/ThinkPython/raw/v3/thinkpython.py');

import thinkpython


# # 程式設計作為一種思考方式
# 
# 本書的第一個目標是教您如何使用Python進行程式設計。
# 但學習程式設計意味著學習一種新的思考方式，所以本書的第二個目標是幫助您像電腦科學家一樣思考。
# 這種思考方式結合了數學、工程學和自然科學的一些最佳特點。
# 就像數學家一樣，電腦科學家使用形式語言來表示想法——特別是計算。
# 就像工程師一樣，他們設計東西，將組件組裝成系統，並評估替代方案之間的權衡。
# 就像科學家一樣，他們觀察複雜系統的行為，形成假設，並測試預測。
# 
# 我們將從程式設計的最基本元素開始，逐步深入。
# 在本章中，我們將看到Python如何表示數字、字母和單詞。
# 您還將學習執行算術運算。
# 
# 您也將開始學習程式設計的詞彙，包括運算子、表達式、值和類型等術語。
# 這個詞彙很重要——您需要它來理解本書的其餘部分，與其他程式設計師交流，以及使用和理解虛擬助理。

# ## 算術運算子
# 
# **算術運算子**是代表算術計算的符號。例如，加號`+`執行加法。

# In[2]:


30 + 12


# 減號`-`是執行減法的運算子。

# In[3]:


43 - 1


# 星號`*`執行乘法。

# In[4]:


6 * 7


# 正斜線`/`執行除法：

# In[5]:


84 / 2


# 注意除法的結果是`42.0`而不是`42`。這是因為Python中有兩種類型的數字：
# 
# * **整數**，表示沒有小數或分數部分的數字，以及
# 
# * **浮點數**，表示整數和帶有小數點的數字。
# 
# 如果您加、減或乘兩個整數，結果是整數。
# 但如果您除兩個整數，結果是浮點數。
# Python提供另一個運算子`//`，它執行**整數除法**。
# 整數除法的結果總是整數。

# In[6]:


84 // 2


# 整數除法也稱為「向下取整除法」，因為它總是向下取整（朝向「地板」）。

# In[7]:


85 // 2


# 最後，運算子`**`執行指數運算；也就是說，它將一個數字提升到某個次方：

# In[8]:


7 ** 2


# 在某些其他語言中，脫字符號`^`用於指數運算，但在Python中
# 它是一個稱為XOR（互斥或）的位元運算子。
# 如果您不熟悉位元運算子，結果可能會令人意外：

# In[9]:


7 ^ 2


# 我不會在本書中介紹位元運算子，但您可以在以下網址了解它們：
# <http://wiki.python.org/moin/BitwiseOperators>。

# ## 表達式
# 
# 運算子和數字的集合稱為**表達式**。
# 表達式可以包含任意數量的運算子和數字。
# 例如，這裡有一個包含兩個運算子的表達式。

# In[10]:


6 + 6 ** 2


# 注意指數運算在加法之前發生。
# Python遵循您可能在數學課上學過的運算順序：指數運算在乘法和除法之前發生，而乘法和除法在加法和減法之前發生。
# 
# 在以下例子中，乘法在加法之前發生。

# In[11]:


12 + 5 * 6


# 如果您希望加法先發生，可以使用括號。

# In[12]:


(12 + 5) * 6


# 每個表達式都有一個**值**。
# 例如，表達式`6 * 7`的值是`42`。

# ## 算術函數
# 
# 除了算術運算子之外，Python還提供一些處理數字的**函數**。
# 例如，`round`函數接受一個浮點數並將其四捨五入到最接近的整數。

# In[13]:


round(42.4)


# In[14]:


round(42.6)


# `abs`函數計算數字的絕對值。
# 對於正數，絕對值就是數字本身。

# In[15]:


abs(42)


# 對於負數，絕對值是正數。

# In[16]:


abs(-42)


# 當我們像這樣使用函數時，我們說我們正在**呼叫**函數。
# 呼叫函數的表達式是一個**函數呼叫**。
# 
# 當您呼叫函數時，括號是必需的。
# 如果您漏掉它們，會得到錯誤訊息。

# 注意：以下儲存格使用`%%expect`，這是一個Jupyter「魔法指令」，意味著我們預期此儲存格中的程式碼會產生錯誤。
# 關於此主題的更多信息，請參見[Jupyter筆記本介紹](https://colab.research.google.com/github/AllenDowney/ThinkPython/blob/v3/chapters/jupyter_intro.ipynb)。

# In[17]:


get_ipython().run_cell_magic('expect', 'SyntaxError', '\nabs 42\n')


# 您可以忽略此訊息的第一行；它不包含我們現在需要理解的任何信息。
# 第二行是包含錯誤的程式碼，下面有一個脫字符號（`^`）來指示發現錯誤的位置。
# 
# 最後一行表明這是一個**語法錯誤**，這意味著表達式的結構有問題。
# 在這個例子中，問題是函數呼叫需要括號。
# 
# 讓我們看看如果您既省略括號*又*省略值會發生什麼。

# In[18]:


abs


# 單獨的函數名稱是一個有值的合法表達式。
# 當它被顯示時，該值表明`abs`是一個函數，並包含一些我稍後會解釋的附加信息。

# ## 字串
# 
# 除了數字之外，Python還可以表示字母序列，這些序列稱為**字串**，因為字母像項鍊上的珠子一樣串在一起。
# 要寫字串，我們可以將字母序列放在直引號內。

# In[19]:


'Hello'


# 使用雙引號也是合法的。

# In[20]:


"world"


# 雙引號使得編寫包含撇號的字串變得容易，撇號與直引號是同一個符號。

# In[21]:


"it's a small "


# 字串也可以包含空格、標點符號和數字。

# In[22]:


'Well, '


# `+`運算子適用於字串；它將兩個字串連接成一個字串，這稱為**連接**

# In[23]:


'Well, ' + "it's a small " + 'world.'


# `*`運算子也適用於字串；它製作字串的多個副本並連接它們。

# In[24]:


'Spam, ' * 4


# 其他算術運算子不適用於字串。
# 
# Python提供一個稱為`len`的函數，用於計算字串的長度。

# In[25]:


len('Spam')


# 注意`len`計算引號之間的字母，但不包括引號。
# 
# 當您建立字串時，請確保使用直引號。
# 反引號，也稱為反撇號，會導致語法錯誤。

# In[26]:


get_ipython().run_cell_magic('expect', 'SyntaxError', '\n`Hello`\n')


# 彎引號，也稱為花式引號，也是非法的。

# In[27]:


get_ipython().run_cell_magic('expect', 'SyntaxError', '\n'Hello'\n')


# ## 值和類型
# 
# 到目前為止，我們已經看到三種值：
# 
# * `2`是整數，
# 
# * `42.0`是浮點數，以及
# 
# * `'Hello'`是字串。
# 
# 一種值的類別稱為**類型**。
# 每個值都有一個類型——或者我們有時說它「屬於」一個類型。
# 
# Python提供一個稱為`type`的函數，告訴您任何值的類型。
# 整數的類型是`int`。

# In[28]:


type(2)


# 浮點數的類型是`float`。

# In[29]:


type(42.0)


# 字串的類型是`str`。

# In[30]:


type('Hello, World!')


# 類型`int`、`float`和`str`可以用作函數。
# 例如，`int`可以接受浮點數並將其轉換為整數（總是向下取整）。

# In[31]:


int(42.9)


# `float`可以將整數轉換為浮點值。

# In[32]:


float(42)


# 現在，這裡有一些可能令人困惑的東西。
# 如果您將一串數字放在引號中會得到什麼？

# In[33]:


'126'


# 它看起來像一個數字，但實際上是一個字串。

# In[34]:


type('126')


# 如果您嘗試像數字一樣使用它，可能會得到錯誤。

# In[35]:


get_ipython().run_cell_magic('expect', 'TypeError', "\n'126' / 3\n")


# 這個例子產生了一個`TypeError`，這意味著表達式中的值（稱為**運算元**）具有錯誤的類型。
# 錯誤訊息表明`/`運算子不支援這些值的類型，它們是`str`和`int`。
# 
# 如果您有一個包含數字的字串，可以使用`int`將其轉換為整數。

# In[36]:


int('126') / 3


# 如果您有一個包含數字和小數點的字串，可以使用`float`將其轉換為浮點數。

# In[37]:


float('12.6')


# 當您寫一個大整數時，您可能會想在數字組之間使用逗號，
# 如`1,000,000`。
# 這在Python中是合法的表達式，但結果不是整數。

# In[38]:


1,000,000


# Python將`1,000,000`解釋為以逗號分隔的整數序列。
# 我們稍後會了解更多關於這種序列的信息。
# 
# 您可以使用下劃線使大數字更易讀。

# In[39]:


1_000_000


# ## 形式語言和自然語言
# 
# **自然語言**是人們說的語言，如中文、英語、西班牙語和法語。它們不是由人設計的；它們是自然演化的。
# 
# **形式語言**是人們為特定應用而設計的語言。
# 例如，數學家使用的符號是一種形式語言，特別適合表示數字和符號之間的關係。
# 同樣，程式語言是被設計來表達計算的形式語言。

# 雖然形式語言和自然語言有一些共同特點，但有重要的差異：
# 
# * 歧義性：自然語言充滿歧義，人們通過使用上下文線索和其他信息來處理。形式語言被設計成幾乎或完全無歧義的，這意味著任何程式都有確切的一個含義，無論上下文如何。
# 
# * 冗餘性：為了彌補歧義性並減少誤解，自然語言使用冗餘。因此，它們通常很冗長。形式語言較少冗餘且更簡潔。
# 
# * 字面性：自然語言充滿成語和隱喻。形式語言的意思完全就是字面意思。

# 因為我們都是在說自然語言的環境中長大的，有時很難適應形式語言。
# 形式語言比自然語言更密集，所以閱讀它們需要更長的時間。
# 此外，結構很重要，所以從上到下、從左到右閱讀並不總是最好的。
# 最後，細節很重要。在自然語言中您可以忽略的拼寫和標點符號上的小錯誤，在形式語言中可能會產生很大的差異。

# ## 除錯
# 
# 程式設計師會犯錯誤。出於奇特的原因，程式設計錯誤被稱為**錯誤（bug）**，追蹤它們的過程被稱為**除錯（debugging）**。
# 
# 程式設計，特別是除錯，有時會帶出強烈的情緒。如果您正在與一個困難的錯誤作鬥爭，您可能會感到憤怒、悲傷或尷尬。
# 
# 為這些反應做準備可能會幫助您處理它們。一種方法是將電腦視為具有某些優勢（如速度和精確度）和特定弱點（如缺乏同理心和無法掌握大局）的員工。
# 
# 您的工作是成為一個好的管理者：找到利用優勢和減輕弱點的方法。並找到利用您的情緒來參與問題的方法，而不讓您的反應干擾您有效工作的能力。
# 
# 學習除錯可能令人沮喪，但這是一項有價值的技能，對程式設計之外的許多活動都很有用。在每一章的結尾都有一個像這樣的部分，包含我對除錯的建議。我希望它們能幫助您！

# ## 詞彙表
# 
# **算術運算子：**
# 一個符號，如`+`和`*`，表示像加法或乘法這樣的算術運算。
# 
# **整數：**
# 表示沒有小數或分數部分的數字的類型。
# 
# **浮點數：**
# 表示整數和帶有小數部分的數字的類型。
# 
# **整數除法：**
# 一個運算子`//`，將兩個數字相除並向下取整為整數。
# 
# **表達式：**
# 變量、值和運算子的組合。
# 
# **值：**
# 整數、浮點數或字串——或我們稍後會看到的其他類型的值之一。
# 
# **函數：**
# 執行某些有用操作的命名語句序列。
# 函數可能接受或不接受參數，可能產生或不產生結果。
# 
# **函數呼叫：**
# 運行函數的表達式——或表達式的一部分。
# 它由函數名稱後跟括號中的參數列表組成。
# 
# **語法錯誤：**
# 程式中使其無法解析的錯誤——因此無法運行。
# 
# **字串：**
# 表示字符序列的類型。
# 
# **連接：**
# 將兩個字串首尾相接。
# 
# **類型：**
# 值的類別。
# 我們到目前為止看到的類型是整數（類型`int`）、浮點數（類型`float`）和字串（類型`str`）。
# 
# **運算元：**
# 運算子操作的值之一。
# 
# **自然語言：**
# 人們說的任何自然演化的語言。
# 
# **形式語言：**
# 人們為特定目的而設計的任何語言，如表示數學思想或電腦程式。
# 所有程式語言都是形式語言。
# 
# **錯誤（bug）：**
# 程式中的錯誤。
# 
# **除錯（debugging）：**
# 查找和修正錯誤的過程。

# ## 練習

# In[40]:


# 這個儲存格告訴Jupyter在發生運行時錯誤時提供詳細的除錯信息
# 在進行練習之前請先運行它。

get_ipython().run_line_magic('xmode', 'Verbose')


# ### 詢問虛擬助理
# 
# 當您閱讀本書時，有幾種方式可以使用虛擬助理或聊天機器人來幫助您學習。
# 
# * 如果您想了解更多關於章節中某個主題的信息，或者有任何不清楚的地方，您可以要求解釋。
# 
# * 如果您在任何練習上遇到困難，您可以尋求幫助。
# 
# 在每一章中，我會建議您可以與虛擬助理一起做的練習，但我鼓勵您自己嘗試，看看什麼對您有效。

# 以下是您可以向虛擬助理詢問的一些主題：
# 
# * 我之前提到位元運算子，但沒有解釋為什麼`7 ^ 2`的值是5。試著問「Python中的位元運算子是什麼？」或「`7 XOR 2`的值是多少？」
# 
# * 我也提到了運算順序。要了解更多詳情，請問「Python中的運算順序是什麼？」
# 
# * 我們用來將浮點數四捨五入到最接近整數的`round`函數可以接受第二個參數。試著問「round函數的參數是什麼？」或「如何將pi四捨五入到三位小數？」
# 
# * 有一個我沒有提到的算術運算子；試著問「Python中的模數運算子是什麼？」

# 大多數虛擬助理都了解Python，所以它們回答這樣的問題相當可靠。
# 但請記住，這些工具會犯錯誤。
# 如果您從聊天機器人獲得程式碼，請測試它！

# ### 練習
# 
# 您可能想知道如果一個數字以`0.5`結尾，`round`會怎麼做。
# 答案是它有時向上取整，有時向下取整。
# 試試這些例子，看看您能否找出它遵循什麼規則。

# In[41]:


round(42.5)


# In[42]:


round(43.5)


# 如果您感到好奇，問一個虛擬助理：「如果一個數字以0.5結尾，Python是向上取整還是向下取整？」

# ### 練習
# 
# 當您學習新功能時，您應該嘗試它並故意犯錯誤。
# 這樣，您就會學到錯誤訊息，當您再次看到它們時，您就會知道它們的意思。
# 現在故意犯錯誤比以後意外犯錯誤要好。
# 
# 1. 您可以使用減號來製作負數，如`-2`。如果您在數字前面放一個加號會發生什麼？`2++2`呢？
# 
# 2. 如果您有兩個值之間沒有運算子，如`4 2`，會發生什麼？
# 
# 3. 如果您呼叫像`round(42.5)`這樣的函數，如果您漏掉一個或兩個括號會發生什麼？

# ### 練習
# 
# 記住每個表達式都有一個值，每個值都有一個類型，我們可以使用`type`函數來找出任何值的類型。
# 
# 以下表達式的值的類型是什麼？對每一個做出您的最佳猜測，然後使用`type`來找出答案。
# 
# * `765`
# 
# * `2.718`
# 
# * `'2 pi'`
# 
# * `abs(-7)`
# 
# * `abs(-7.0)`
# 
# * `abs`
# 
# * `int`
# 
# * `type`

# ### 練習
# 
# 以下問題讓您有機會練習編寫算術表達式。
# 
# 1. 42分42秒有多少秒？
# 
# 2. 10公里有多少英里？提示：1英里有1.61公里。
# 
# 3. 如果您以42分42秒跑完10公里賽跑，您的平均配速是每英里多少秒？
#     
# 4. 您的平均配速是每英里多少分多少秒？
# 
# 5. 您的平均速度是每小時多少英里？
# 
# 如果您已經了解變量，您可以在這個練習中使用它們。
# 如果您不了解，您可以不使用變量來完成練習——然後我們會在下一章中看到它們。

# In[43]:


# 解答
# 總秒數
42 * 60 + 42


# In[44]:


# 解答
# 英里數
10 / 1.61


# In[45]:


# 解答
# 每英里秒數
2562 / 6.21118


# In[46]:


# 解答
# 配速的分鐘部分
412.48 // 60


# In[47]:


# 解答
# 配速的秒數部分
412.48 % 60


# In[48]:


# 解答
# 小時數
2562 / 60 / 60


# In[49]:


# 解答
# 每小時英里數
6.21118 / 0.711666


# In[ ]:





# [Think Python: 3rd Edition](https://allendowney.github.io/ThinkPython/index.html)
# 
# 版權所有 2024 [Allen B. Downey](https://allendowney.com)
# 
# 程式碼許可證：[MIT License](https://mit-license.org/)
# 
# 文本許可證：[Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)
